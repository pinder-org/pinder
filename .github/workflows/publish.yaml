name: Publish to PyPI
on:
  push:
    branches:
      - main
      - publish-pypi
jobs:
  test:
    name: Test
    strategy:
      matrix:
        python-version: ["3.10"]
    if: |
        github.repository == 'pinder-org/pinder' &&
        ! contains(toJSON(github.event.commits.*.message), '[skip ci]')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: install foldseek
        shell: bash
        run: |
            # install foldseek:
            # https://github.com/steineggerlab/foldseek
            wget https://mmseqs.com/foldseek/foldseek-linux-avx2.tar.gz
            tar xvzf foldseek-linux-avx2.tar.gz
            # https://www.scivision.dev/github-actions-path-append/
            echo $(pwd)/foldseek/bin/ >> $GITHUB_PATH

      - name: install mmseq
        shell: bash
        run: |
            wget https://mmseqs.com/latest/mmseqs-linux-avx2.tar.gz
            tar xvfz mmseqs-linux-avx2.tar.gz
            echo $(pwd)/mmseqs/bin/ >> $GITHUB_PATH

      - name: install iAlign
        shell: bash
        run: |
            # install iAlign:
            # https://sites.gatech.edu/cssb/ialign/
            wget http://cssb2.biology.gatech.edu/skolnick/files/iAlign/ialign_64_v1.1b2.tar.gz
            tar xvzf ialign_64_v1.1b2.tar.gz
            # https://www.scivision.dev/github-actions-path-append/
            echo $(pwd)/ialign/bin/ >> $GITHUB_PATH

      - name: Install tox
        run: pip install tox

      - name: Directory Cache
        uses: actions/cache@v4
        with:
          path: .tox
          key: tox-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('tox.ini') }}
          restore-keys: |
            tox-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Run python tests
        run: python -m tox -- src tests --doctest-modules --doctest-glob='*md' --doctest-continue-on-failure --cov-config=tox.ini --color=yes --durations=10 --cov-report=xml

      - name: Shim code coverage report
        shell: bash
        run: sed -i.tmp "s|<source>.*\.tox.*site-packages|<source>$(pwd)/src|" coverage.xml
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: OS,PYTHON
          # fail_ci_if_error: true
          files: ./coverage.xml
          codecov_yml_path: ./codecov.yml
          # flags: unittests
          # name: codecov-umbrella
          verbose: true
  pypi-publish:
    name: upload release to PyPI
    needs: test
    runs-on: ubuntu-latest
    environment: release
    if: |
        github.repository == 'pinder-org/pinder' &&
        ! contains(toJSON(github.event.commits.*.message), '[skip ci]')
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Set cache dir
        id: get-cache
        shell: bash
        run: echo "cache-path=${GITHUB_ACTION_PATH/\.\//}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build setuptools setuptools_scm[toml] wheel semver tomlkit

      - name: Get existing tags
        shell: bash
        run: git fetch --prune --unshallow --tags

      - name: Determine new git tag
        shell: bash
        id: get-tag
        run: |
            TAG=$(bash version.sh)
            echo "tag-name=${TAG}" >> $GITHUB_OUTPUT
            echo "tag-version=${TAG/v/}" >> $GITHUB_OUTPUT

      - name: Validate git tag
        shell: bash
        if: steps.get-tag.outputs.tag-name == 'v'
        run: exit 1

      - name: Create git tag
        shell: bash
        run: git tag ${{ steps.get-tag.outputs.tag-name }}

      - name: Build package
        run: |
          python -m build

      - name: Publish package distributions to PyPI
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Persist tags
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        shell: bash
        run: git push --tags
