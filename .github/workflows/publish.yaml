name: Publish to PyPI
on:
  push:
    branches:
      - main
jobs:
  pypi-publish:
    name: upload release to PyPI
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Set cache dir
        id: get-cache
        shell: bash
        run: echo "cache-path=${GITHUB_ACTION_PATH/\.\//}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build setuptools setuptools_scm[toml] wheel semver tomlkit

      - name: Get existing tags
        shell: bash
        run: git fetch --prune --unshallow --tags

      - name: Determine new git tag
        shell: bash
        id: get-tag
        run: |
            TAGS=$(git for-each-ref --sort=creatordate --format='%(refname:short)' refs/tags)
            LATEST_TAG=$(echo "${TAGS}" | grep -v "-" | tail -n 1 | awk -F' ' '{print $NF}')
            LATEST_VERSION=${LATEST_TAG/v/}
            LATEST_TAG_COMMIT=$(git rev-parse "${LATEST_TAG}")
            HEAD_COMMIT=$(git rev-parse HEAD)
            if [[ "${LATEST_TAG_COMMIT}" == "${HEAD_COMMIT}" ]]; then
                exit 0
            fi
            if [[ "${LATEST_VERSION}" == "" ]]; then
                LATEST_VERSION=0.0.0
            fi
            BUMP=$(git log -n 1 | sed -n "/^.*bumpversion \(.*\)$/s//\1/p" | cut -f1 -d' ' | tail -n 1 | awk -F' ' '{print $NF}')
            BUMP=$(python -c "print('${BUMP}'.lower() if '${BUMP}'.lower() in ['major', 'minor', 'patch', 'skip'] else 'patch')")
            if [[ "${BUMP}" != "skip" ]]; then
                NEW_VERSION=$(python -c "import semver; print(semver.bump_${BUMP}('${LATEST_VERSION}'))")
                TAG=v${NEW_VERSION}
            fi
            echo "tag-name=${NEW_VERSION}" >> $GITHUB_OUTPUT
            echo "tag-version=${NEW_VERSION/v/}" >> $GITHUB_OUTPUT

      - name: Validate git tag
        shell: bash
        if: steps.get-tag.outputs.tag-name == 'v'
        run: exit 1

      - name: Create git tag
        shell: bash
        run: git tag ${{ steps.get-tag.outputs.tag-name }}

      - name: Build package
        run: |
          python -m build

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Persist tags
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        shell: bash
        run: git push --tags
